// const { reload } = require("browser-sync");

$.ajaxSetup({
    headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
});

function pagination_data(e = []) {
    if (!$(e).attr('action').length)
        return false;
    // console.log($(e).serialize());
    $.ajax({
        data: $(e).serialize(),
        method: 'get',
        url: $(e).attr('action'),
        success: function (data) {
            $(e).next(".my_datatable").remove();
            // datatable.each(function(){
            //     $(this).remove();
            // });
            $('.datatable_bulk_action').attr('disabled', true);
            $(data).insertAfter(e);
            feather.replace();
            $(document).find('[data-bs-toggle="tooltip"]').tooltip();
        }
    });
}

function reloadDataTable(e) {
    var form = $(e).closest('.my_datatable').prev('form');
    // form = $(form).length>0?form:$('form.datatable_paginate')[0] ;
    if ($(form).length > 0)
        pagination_data(form);
    else {
        $('.datatable_paginate').each(function () {
            pagination_data($(this));
        });
    }
}

$('.modal').on('show.bs.modal', function () {
    // Find all forms inside the modal
    $(this).find('form').each(function () {
        const textarea = $(this).find('textarea.quill-editor');
        if (textarea.length > 0) {
            textarea.each(function () {
                if (!$(this).siblings('.quill-container').length) {
                    let quillDiv = $('<div class="quill-container mb-2"></div>');
                    $(quillDiv).html($(this).val());


                    $(this).before(quillDiv);
                    $(this).hide();
                    var textar = $(this);

                    let quill = new Quill(quillDiv[0], {
                        // theme: 'snow',
                        // bounds: '.full-quill-editor',
                        modules: {
                            formula: true,
                            syntax: true,
                            toolbar: [
                                [
                                    {
                                        font: []
                                    },
                                    {
                                        size: []
                                    }
                                ],
                                ['bold', 'italic', 'underline', 'strike'],
                                [
                                    {
                                        color: []
                                    },
                                    {
                                        background: []
                                    }
                                ],
                                [
                                    {
                                        script: 'super'
                                    },
                                    {
                                        script: 'sub'
                                    }
                                ],
                                [
                                    {
                                        header: '1'
                                    },
                                    {
                                        header: '2'
                                    },
                                    'blockquote',
                                    'code-block'
                                ],
                                [
                                    {
                                        list: 'ordered'
                                    },
                                    {
                                        list: 'bullet'
                                    },
                                    {
                                        indent: '-1'
                                    },
                                    {
                                        indent: '+1'
                                    }
                                ],
                                [
                                    'direction',
                                    {
                                        align: []
                                    }
                                ],
                                ['link', 'formula'],
                                ['clean']
                            ]
                        },
                        theme: 'snow'
                    });

                    quill.on('text-change', function () {
                        $(textar).val(quill.root.innerHTML).trigger('change');
                    });

                    $(textar).data('quill', quill);

                }
            });
        }
    });
});

let sleep = ms => {
    return new Promise(resolve => setTimeout(resolve, ms));
};

$(document).on("click", "[class*='openmodal-']", function (e) {
    var className = this.className;
    // Extract the part of the class name that starts with "openmodal-"
    var match = className.match(/openmodal-\S+/);
    // Check if a match is found
    if (!match)
        return false;
    var modalId = match[0].replace('openmodal-', '').toString();
    var url = $(this).attr('recordof');

    $.ajax({
        url: Base_url + "admin/helper/getRecord/" + url,
        method: "post",
        success: function (json) {
            console.log(json);
            if (json.Status == 200) {
                var modal = $('#' + modalId);
                // console.log(modal);
                if (modal.hasClass('modal'))
                    modal.modal('show');

                setModalVlues(json.Data, modal);
            }
            else {
                toastr.info('ðŸ‘‹' + (json.Message ? json.Message : 'Record Not Found!'),
                    'Data Not Found!',
                    { closeButton: true, tapToDismiss: false });

                if (json?.Redirect)
                    window.location = json?.Redirect;

            }
        }

    });

    // Rest of your click event handling logic goes here
});

//--------------------------------------------------------------------------------------------------
function setModalVlues(modalData, modal) {


    for (var key in modalData) {


        // Special handling for 'images' array (e.g. banner, mobile, desktop)

        // var tagname = $('#' + key).prop("tagName");
        tagname = ($("[id='" + key + "']", modal).prop("tagName") != undefined) ? $("[id='" + key + "']", modal).prop("tagName") : $("[name='" + key + "']", modal).prop("tagName");

        // console.log('tagname', tagname);
        let value = modalData[key];

        let recordId = modalData['id'];
        let tableName = modalData['table'];
        let column = modalData['column'];

        let type;

        tagname = tagname != undefined ? tagname : $("[name='" + key + "[]']", modal).prop("tagName");


        // if (key === 'images' && Array.isArray(modalData[key])) {
        //     modalData[key].forEach(imageObj => {
        //         const type = imageObj.categorie_image_type; // 'banner', 'mobile', 'desktop'
        //         try {
        //             const pathArray = JSON.parse(imageObj.categorie_image_path); // Array of image paths
        //             if (Array.isArray(pathArray) && pathArray.length > 0) {
        //                 // Get dynamic base path
        //                 const currentOrigin = window.location.origin;
        //                 const basePath = window.location.pathname.split('/')[1]; // e.g. 'ecommerce_panel'
        //                 const fullBase = `${currentOrigin}/${basePath}`;

        //                 const previewContainer = $('#categorie_' + type + '_image_preview .preview-image-container', modal);

        //                 if (previewContainer.length) {
        //                     previewContainer.empty(); // Clear existing previews

        //                     pathArray.forEach(rawPath => {
        //                         const cleanedPath = rawPath.replace(/\\/g, '').replace(/^\/+/, '');
        //                         const fullImagePath = `${fullBase}/${cleanedPath}`;

        //                         const img = `<img src="${fullImagePath}" alt="${type} preview" class="img-preview me-2 mb-2 rounded" style="max-width: 100px; border: 1px solid #ccc; padding: 4px;">`;

        //                         previewContainer.append(img);
        //                     });
        //                 }

        //                 console.log(`${type} Images:`, pathArray);
        //             }
        //         } catch (e) {
        //             console.error(`Error parsing categorie_image_path for type "${type}"`, e);
        //         }
        //     });

        //     return;
        // }

        if (key === 'images' && Array.isArray(modalData[key])) {
            modalData[key].forEach(imageObj => {
                const type = imageObj.categorie_image_type;
                const recordId = imageObj.id || '';
                const tableName = imageObj.table_name;
                const imagePath = 'categorie_image_path';

                try {
                    const pathArray = JSON.parse(imageObj.categorie_image_path);
                    if (Array.isArray(pathArray) && pathArray.length > 0) {
                        const currentOrigin = window.location.origin,
                            basePath = window.location.pathname.split('/')[0],
                            fullBase = `${currentOrigin}${basePath}`;

                        const previewContainer = $('#categorie_' + type + '_image_preview .preview-image-container', modal);

                        if (previewContainer.length) {
                            previewContainer.empty();

                            pathArray.forEach(rawPath => {
                                if (typeof rawPath !== 'string') return;

                                const cleanedPath = rawPath.replace(/\\/g, '/').replace(/^\/+/, '');
                                const fullUrl = `${fullBase}/${cleanedPath}`;
                                const ext = cleanedPath.split('.').pop().toLowerCase().replace(/["\]]/g, '');
                                const sanitizedPath = encodeURIComponent(cleanedPath);

                                const closeBtn = `<button type="button" class="btn-close position-absolute top-0 end-0 remove-image" aria-label="Close" style="background-color: #fff;"></button>`;

                                if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(ext)) {
                                    previewContainer.append(`
                                        <div class="image-wrapper d-inline-block position-relative me-2 mb-2"
                                            data-image="${sanitizedPath}"
                                            data-id="${recordId}"
                                            data-column="${imagePath}"
                                            data-table="${tableName}">
                                            <img src="${fullUrl}" alt="${type} preview" class="img-preview" style="max-width: 100px; border: 1px solid #ccc; padding: 4px;">
                                            ${closeBtn}
                                        </div>
                                    `);
                                } else {
                                    previewContainer.append(`
                                        <div class="file-wrapper d-inline-block position-relative me-2 mb-2"
                                            data-image="${sanitizedPath}"
                                            data-id="${recordId}"
                                            data-table="${tableName}">
                                            <a href="${fullUrl}" target="_blank" class="btn btn-sm btn-primary">View File</a>
                                            ${closeBtn}
                                        </div>
                                    `);
                                }
                            });
                        }

                        console.log(`${type} Images:`, pathArray);
                    }
                } catch (e) {
                    console.error(`Error parsing categorie_image_path for type "${type}"`, e);
                }
            });

            return;
        }



        if (tagname == 'INPUT') {
            type = $("[name='" + key + "']", modal).attr("type");
            type = type != undefined ? type : $("[name='" + key + "[]']", modal).attr("type");


            if (type == 'radio') {
                $('input[name="' + key + '"][value="' + modalData[key] + '"]', modal).click();
            }
            else if (type == 'file') {
                console.log('file', key, modalData[key]);
                console.log('tablename', modalData['tablename']);



                let fileInput = $('#' + key, modal);
                let filePaths = modalData[key];
                let baseUrl = window.location.origin + window.location.pathname.split('/').slice(0, -1).join('/');
                let previewContainer = $('#' + key + '_preview .preview-image-container', modal);

                previewContainer.empty();

                if (typeof filePaths === 'string') {
                    try {
                        filePaths = JSON.parse(filePaths);
                    } catch (e) {
                        filePaths = [filePaths];
                    }
                }

                if (!Array.isArray(filePaths)) {
                    filePaths = [filePaths];
                }
                const singleFile = filePaths.length === 1;

                filePaths.forEach(filePath => {
                    filePath = filePath.replace(/\\/g, '/').replace(/^\/+/, '');
                    let fullUrl = `${baseUrl}/${filePath}`;
                    let ext = filePath.split('.').pop().toLowerCase().replace(/["\]]/g, '');
                    let sanitizedPath = encodeURIComponent(filePath); // safer for data attribute
                    let closeBtn = !singleFile ? `<button type="button" class="btn-close position-absolute top-0 end-0 remove-image" aria-label="Close" style="background-color: #fff;"></button>` : '';

                    if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(ext)) {
                        previewContainer.append(`
                            <div class="image-wrapper d-inline-block position-relative me-2 mb-2"
                                data-image="${sanitizedPath}"
                                data-id="${recordId}"
                                data-column="${column}"
                                data-table="${tableName}">
                                <img src="${fullUrl}" alt="Preview" class="img-preview" style="max-width: 100px;">
                                ${closeBtn}
                            </div>
                        `);
                    } else {
                        let fileCloseBtn = !singleFile ? `<button type="button" class="btn-close remove-image" aria-label="Close" style="margin-left: 5px;"></button>` : '';
                        previewContainer.append(`
                            <div class="file-wrapper d-inline-block position-relative me-2 mb-2"
                                data-image="${sanitizedPath}"
                                data-id="${recordId}"
                                data-column="${column}"
                                data-table="${tableName}">
                                <a href="${fullUrl}" target="_blank" class="btn btn-sm btn-primary">View File</a>
                                ${fileCloseBtn}
                            </div>
                        `);
                    }
                });


            }



            else if (type == 'checkbox') {

                // if (Array.isArray(modalData[key])) {
                //      console.log('checkbox', key, modalData[key]);

                //     for (let i of modalData[key]) {
                //         if (jQuery.inArray(i, modalData[key]) != -1)
                //             $('input[name="' + key + '"][value="' + i + '"]', modal).prop('checked', true);
                //         else
                //             $('input[name="' + key + '"][value="' + i + '"]', modal).prop('checked', false);

                //         $('input[name="' + key + '"][value="' + i + '"]', modal).change();

                //         if (jQuery.inArray(this.value, modalData[key]) != -1)
                //             $('input[name="' + key + '[]"][value="' + i + '"]', modal).prop('checked', true);
                //         else
                //             $('input[name="' + key + '[]"][value="' + i + '"]', modal).prop('checked', false);

                //         $('input[name="' + key + '[]"][value="' + i + '"]', modal).change();

                //     }
                // }
                if (Array.isArray(modalData[key])) {

                    $('input[name="' + key + '[]"]', modal).prop('checked', false);

                    for (let i of modalData[key]) {
                        $('input[name="' + key + '[]"][value="' + i + '"]', modal).prop('checked', true).change();
                    }
                }
                else {
                    $('input[name="' + key + '[]"][value="' + modalData[key] + '"]', modal).prop('checked', true).trigger('change');
                    $('input[name="' + key + '[]"][value="' + modalData[key] + '"]', modal).change();
                }
                // if (Array.isArray(modalData[key])) {
                //     $('input[name="' + key + '[]"]', modal).each(function () {
                //         let checkboxValue = $(this).val();
                //         if (modalData[key].includes(checkboxValue)) {
                //             $(this).prop('checked', true);
                //         } else {
                //             $(this).prop('checked', false);
                //         }
                //         $(this).change(); // Trigger change event
                //     });
                // } else {
                //     $('input[name="' + key + '"][value="' + modalData[key] + '"]', modal).prop('checked', true).change();
                // }
                // $('input[name="' + key + '"][value="' + modalData[key] + '"]').prop('checked',true);
            }
            else
                $('#' + key, modal).val(modalData[key]).change();
        }
        // else if(tagname == 'IMG')
        // {
        //     $('#' + key,modal).attr('src',modalData[key]);
        // }
        else if (tagname == 'IMG') {
            console.log('img', key, modalData[key]);
            if (modalData[key]) {
                $('#' + key, modal).attr('src', modalData[key]);
            } else {
                $('#' + key, modal).attr('src', 'public/images/select_image.png');
            }
        }
        else if (tagname == 'TEXTAREA') {
            // console.log(key,modalData[key]);

            if ($('#' + key, modal).hasClass('summernote-block')) //when textarea with summernote
                $('#' + key, modal).summernote("code", modalData[key]);
            else if ($('#' + key, modal).hasClass('quill-editor')) {

                // $('#' + key, modal).html(modalData[key]).trigger('change');
                // $('#' + key, modal).closest('.ql-editor').html(modalData[key]);
                // console.log('quill-editor', modalData[key]);
                const quillInstance = $('#' + key, modal).data('quill');


                if (quillInstance) {
                    quillInstance.clipboard.dangerouslyPasteHTML(modalData[key]);
                } else {
                    console.warn('No Quill instance found for', key);
                }
            }
            else
                $('#' + key, modal).html(modalData[key]).trigger('change');
        }
        else if (tagname == 'SELECT') {

            let selectElement = $('[name="' + key + '"]', modal).length > 0 ? $('[name="' + key + '"]', modal) : $('[name="' + key + '[]"]', modal);

            const isMultiple = selectElement.prop('multiple'); // Check if the select is multiple
            let selectedValue = modalData[key];
            if (isMultiple && selectedValue) {
                try {
                    selectedValue = JSON.parse(selectedValue); // Decode JSON if necessary
                } catch (e) {
                    console.error('Invalid JSON for multiple select:', selectedValue);
                    selectedValue = [];
                }
                selectElement.val(selectedValue);
            } else {
                if (selectedValue == '' || selectedValue == 0) {
                    selectElement.find(':nth-child(0)').prop('checked', true);
                    selectElement.attr('selected-value', '');
                } else {
                    selectElement.val(selectedValue);
                    selectElement.attr('selected-value', selectedValue);
                }
            }
            selectElement.trigger('change');
        }
        else if (tagname == 'I')
            $('#' + key, modal).css('background', modalData[key]);
        else if (tagname == 'IFRAME') {
            $('#' + key, modal).attr('src', modalData[key]);
        }
        else if (tagname == 'A') {
            $('#' + key, modal).attr('href', modalData[key]);
            $("#" + key, modal).removeClass('d-none');
        }


    }
}
//--------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
$(document).ready(function () {
    $('.datatable_paginate').bind('change keyup reset', 'input, select, textarea', function (event) {


        if (event.target.name === 'datatable_bulk_action') return;

        var form = $(this).closest("form");
        $('[name=page]', form).val(1);
        pagination_data(form);

        if (event.type === 'reset') {
            form.find('.select2').val(null).trigger('change');
            sleep(100).then(() => { pagination_data(form); });
        }
    });

    $('.datatable_paginate').each(function () {
        pagination_data($(this));
    });
    $(document).on('click', '.pagination a', function (event) {
        event.preventDefault();
        var link = $(this).attr('href').split('?page=');
        var form = $('form[action="' + link[0] + '"]');

        // $('[name=page]',form).val(link[1]);
        // Check if the element exists
        var pageInput = $('[name=page]', form);
        if (pageInput.length === 0) {
            // Element not found, create it and set its value
            pageInput = $('<input>').attr({
                type: 'hidden',
                name: 'page',
                value: link[1]
            }).appendTo(form);
        }
        pageInput.val(link[1]);
        pagination_data(form);
    });

    $(document).on("click", ".order_by", function (event) {
        event.preventDefault();

        var column = $(this).data('column');
        // console.log(column)
        var form = $(this).closest(".my_datatable").prev("form");

        var currentSort = $('[name=sort]', form).val();
        // console.log(currentSort);
        var currentDirection = $('[name=direction]', form).val();
        // console.log(currentDirection);

        var newDirection = (currentSort == column && currentDirection == 'asc') ? 'desc' : 'asc';
        // console.log("fddfdf",newDirection)

        $('.sort-icon').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');

        // Update clicked column icon
        var iconClass = newDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down';
        $(this).find('.sort-icon').removeClass('fa-sort').addClass(iconClass);

        $('[name=sort]', form).val(column);
        $('[name=direction]', form).val(newDirection);
        $('[name=page]', form).val(1);


        pagination_data(form);
    });

});

// Code to change status
$(document).on("change", ".datatable_bulk_action", function (e) {
    var bulk_element = this;
    var action_val = $(this).val();

    const notupdatedaction = () => {
        reloadDataTable(bulk_element);
        bulk_element.value = '';
        toastr.info(`ðŸ‘‹ No changes detected for actions!`,
            'No changes!',
            { closeButton: true, tapToDismiss: false });
    }

    if (action_val == '' || action_val == null) {
        // notupdatedaction();
        return false;
    }


    // Are you sure you want to change the status of all selected records?
    Swal.fire({
        title: 'Are you sure?',
        text: 'Are you sure you want to ' + (action_val == "delete" ? 'delete ' : ' change the status of ') + 'all selected records?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes,' + (action_val == "delete" ? 'delete ' : ' change ') + 'it!',
        customClass: {
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-outline-danger ms-1'
        },
        buttonsStyling: false
    }).then(function (result) {
        if (result.value) {
            var ids = [];
            $('.datatable_checkbox:checked').each(function () {
                ids.push($(this).val());
            });
            var url = $(bulk_element).data('actionurl');
            $.ajax({
                url: Base_url + "admin/helper/bulk-action/" + url,
                type: "post",
                data: {
                    ids: ids,
                    action: action_val,
                },
                success: function (data) {

                    if (data.Status == 200) {
                        // var datatable_switch = $(bulk_element).parent('.datatable-switch');

                        toastr['success']('ðŸ‘‹ ' + data.Message + '!', ('Actions'), {
                            closeButton: true,
                            tapToDismiss: false
                        });

                        reloadDataTable(bulk_element);
                        bulk_element.value = '';
                    }
                    else {
                        notupdatedaction();
                    }
                },
                error: function () {
                    notupdatedaction();
                }
            });
        }
        else {
            notupdatedaction();
        }
    });

});


// Code to change status
$(document).on("change", ".change_status", function (e) {

    var checked = $(this).is(':checked');
    var status_element = this;
    const notupdatedstatus = () => {
        toastr.info(`ðŸ‘‹ Status Not Updated Still ${checked ? 'InActive' : 'Active'}!`,
            checked ? 'Still InActive!' : 'Still Active!',
            { closeButton: true, tapToDismiss: false });
    }

    // if (!confirm('Are you sure you want to ' + (checked ? 'Activate' : 'InActivate') + ' It?')) {
    //     $(this).prop('checked', !checked);
    //     notupdatedstatus();
    //     return false;
    // }

    Swal.fire({
        title: 'Are you sure?',
        text: 'Are you sure you want to ' + (checked ? 'Activate' : 'InActivate') + ' It?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Change it!',
        customClass: {
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-outline-danger ms-1'
        },
        buttonsStyling: false
    }).then(function (result) {
        if (result.value) {
            var url = $(status_element).attr('statusto');
            $.ajax({
                url: Base_url + "admin/helper/change-stautus/" + url,
                type: "post",
                data: {},
                success: function (data) {
                    console.log(data);
                    if (data.Status == 200) {
                        var datatable_switch = $(status_element).parent('.datatable-switch');

                        $(status_element).attr('title', 'Click to ' + (checked ? 'Deactivate' : 'Activate'));
                        datatable_switch.attr('title', 'Click to ' + (checked ? 'Deactivate' : 'Activate'));
                        $('[role="tooltip"] .tooltip-inner').html($(datatable_switch).attr('title'));

                        toastr['success']('ðŸ‘‹ Status Successfully ' + (checked ? 'Activated' : 'InActivated') + '!', (checked ? 'Activated!' : 'InActivated!'), {
                            closeButton: true,
                            tapToDismiss: false
                        });
                        $('[data-bs-toggle="tooltip"]').tooltip();
                    }
                    else {
                        $(status_element).prop('checked', !checked);
                        notupdatedstatus();
                    }

                },
                error: function () {
                    $(status_element).prop('checked', !checked);
                    notupdatedstatus();
                }

            });

        }
        else {

            $(status_element).prop('checked', !checked);
            notupdatedstatus();
        }
    });
});

// Code to delete record
$(document).on("click", ".delete_record", function (e) {

    var delete_element = this;
    const notDeleted = () => {
        toastr.info(`ðŸ‘‹ Record Not Deleted!`,
            'Not Deleted',
            { closeButton: true, tapToDismiss: false });
    }
    Swal.fire({
        title: 'Are you sure?',
        text: "You want to Delete It!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Delete it!',
        customClass: {
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-outline-danger ms-1'
        },
        buttonsStyling: false
    }).then(function (result) {
        if (result.value) {
            var url = $(delete_element).attr('deleteto');
            $.ajax({
                url: Base_url + 'admin/helper/delete-record/' + url,
                type: 'post',
                data: {},
                // dataType: 'json', // Expect JSON response
                // contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.Status == 200) {
                        toastr['success']('ðŸ‘‹ Record Deleted Successfully !', 'Deleted', {
                            closeButton: true,
                            tapToDismiss: false
                        });

                        if ($(delete_element).attr('reload-page') == '1')
                            window.location.reload();

                        reloadDataTable(delete_element);
                    }
                    else {
                        toastr.info('ðŸ‘‹' + (data.Message ? data.Message : 'Record Not Deleted!'),
                            'Not Deleted',
                            { closeButton: true, tapToDismiss: false });

                        if (data?.Redirect)
                            window.location = data?.Redirect;

                    }
                },
                error: function () {
                    notDeleted();
                }
            });
        }
        else
            notDeleted();
    });
});

// Code to change status
$(document).on("click", ".itsrst-pass", function (e) {

    var rstpass_element = this;
    const notresetpass = () => {
        toastr.info(`ðŸ‘‹ Password Not Reseted Still!`, 'Still Old Password!',
            { closeButton: true, tapToDismiss: false });
    }
    Swal.fire({
        title: 'Are you sure?',
        text: "You want to Reset Password!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Reset it!',
        customClass: {
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-outline-danger ms-1'
        },
        buttonsStyling: false
    }).then(function (result) {
        if (result.value) {
            var url = $(rstpass_element).attr('rstpassto');
            $.ajax({
                url: Base_url + url,
                type: "post",
                data: {},
                success: function (data) {
                    if (data.Status == 200) {
                        toastr['success']('ðŸ‘‹ Password Reseted Successfully!', 'Password Reseted!', {
                            closeButton: true,
                            tapToDismiss: false
                        });
                    }
                    else
                        notresetpass();

                },
                error: function () {
                    notresetpass();
                }

            });
        }
        else
            notresetpass();
    });

    // if(!confirm('Are you sure you want to Reset Password?'))
    // {
    //     notupdatedstatus();
    //     return false;
    // }


});

// Code to change status
$(document).on("click", ".itclrlogin", function (e) {

    var rstpass_element = this;
    const notclearedAttempts = () => {
        toastr.info(`ðŸ‘‹ Not Cleared!`, 'Not Cleared!',
            { closeButton: true, tapToDismiss: false });
    }
    Swal.fire({
        title: 'Are you sure?',
        text: "You want to clear login Attempts of user!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Reset it!',
        customClass: {
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-outline-danger ms-1'
        },
        buttonsStyling: false
    }).then(function (result) {
        if (result.value) {
            var url = $(rstpass_element).attr('clrloginto');
            $.ajax({
                url: Base_url + url,
                type: "post",
                data: {},
                success: function (data) {
                    if (data.Status == 200) {
                        toastr['success']('ðŸ‘‹Successfully cleared login Attempts!', 'Cleared Login Attempts!', {
                            closeButton: true,
                            tapToDismiss: false
                        });
                    }
                    else
                        notclearedAttempts();

                },
                error: function () {
                    notclearedAttempts();
                }

            });
        }
        else
            notclearedAttempts();
    });

});

// Function to Image Preview
function initializeImagePreview() {
    const inputs = document.querySelectorAll('.preview-image-input');

    inputs.forEach(input => {
        input.addEventListener('change', function (event) {
            const fileInput = event.target;
            const targetImageId = fileInput.dataset.target;
            const previewImage = document.getElementById(targetImageId);

            if (fileInput.files && fileInput.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    previewImage.src = e.target.result;
                };

                reader.readAsDataURL(fileInput.files[0]);
            } else {
                previewImage.src = previewImage.dataset.defaultSrc;
            }
        });
    });
}
document.addEventListener('DOMContentLoaded', initializeImagePreview);

// ----------------------------------------------------------------------------------------------------------
// Code to bluk actions(Datatable checkbox)
$(document).on('change', '.datatable_allcheckbox', function () {
    var checked = $(this).prop('checked');

    $('.datatable_checkbox').prop('checked', checked);
    if (checked) {
        $('.datatable_bulk_action').attr('disabled', false);
        $('.datatable_checkbox').closest('tr').addClass('bg-light-primary');
    } else {
        $('.datatable_bulk_action').val('').trigger('change');
        $('.datatable_bulk_action').attr('disabled', true);
        $('.datatable_checkbox').closest('tr').removeClass('bg-light-primary');
    }
});
// Code to bluk actions(record checkbox)
$(document).on('change', '.datatable_checkbox', function () {
    let checked = $('.datatable_checkbox:checked');
    $(this).closest('tr').toggleClass('bg-light-primary', checked);
    if ($('.datatable_checkbox:checked').length > 0) {
        $('.datatable_allcheckbox').prop('checked', true);
        $('.datatable_bulk_action').attr('disabled', false);
        $(this_input).closest('tr').addClass('bg-light-primary');
    } else {
        $('.datatable_bulk_action').val('').trigger('change');
        $('.datatable_allcheckbox').prop('checked', false);
        $('.datatable_bulk_action').attr('disabled', true); // Disable button if no checkboxes are checked
        $(this_input).closest('tr').removeClass('bg-light-primary');
    }
});

$(document).on('click', '.remove-image', function () {
    const $btn = $(this);
    const $wrapper = $btn.closest('.image-wrapper, .file-wrapper');

    const imagePath = $wrapper.data('image');
    const tableName = $wrapper.data('table');
    const recordId = $wrapper.data('id');
    const column = $wrapper.data('column');

    console.log('imagePath', imagePath, ' tableName', tableName, ' recordId', recordId);

    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
        customClass: {
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-outline-danger ms-1'
        },
        buttonsStyling: false
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '/ecommerce_panel/delete-image',
                method: 'POST',
                data: {
                    _token: $('meta[name="csrf-token"]').attr('content'),
                    image: imagePath,
                    table: tableName,
                    id: recordId,
                    column: column
                },
                success: function (res) {
                    console.log('res', res);
                    if (res.success) {
                        $wrapper.remove();
                        toastr['success']('ðŸ‘‹ ' + res.message + '!', ('Actions'), {
                            closeButton: true,
                            tapToDismiss: false
                        });
                    } else {
                        Swal.fire('Failed!', 'Failed to delete the file.', 'error');
                    }
                },
                error: function () {
                    Swal.fire('Error!', 'An error occurred while deleting the file.', 'error');
                }
            });
        }
    });
});
